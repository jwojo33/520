def linear_power():
    """
    Compute linear power

    Returns:
        q (float): Linear power in a single channel [W/m]
        z (float): Corresponding axial coordinates [m]
    """
    q = 17000
    z = 4
    return q, z

# Example usage:
linear_power_result = linear_power()
print("Linear Power:", linear_power_result[0])
print("Axial Coordinates:", linear_power_result[1])


def coolant_mass_flow_rate():
    """
    Coolant mass flow rate

    Returns:
        m (float): Mass flow rate in a single channel [kg/s]
    """
    m = .394
    return m

# Example usage:
coolant_mass_flow_rate_result = coolant_mass_flow_rate()
print("Coolant Mass Flow Rate:", coolant_mass_flow_rate_result)


def coolant_heat_capacity():
    """
    Coolant specific heat capacity at constant pressure

    Returns:
        cpc (float): Heat capacity at constant pressure [J/kg-K]
    """
    cpc = 4310
    return cpc

# Example usage:
coolant_heat_capacity_result = coolant_heat_capacity()
print("Coolant Heat Capacity:", coolant_heat_capacity_result)


import numpy as np
def compute_core_temperatures(q, z, m, cpc, Tin):
    """
    Compute temperature of core components

    Args:
        q (float or array): Linear power [W/m]
        z (float or array): Axial locations corresponding to linear power values [m]
        m (float): Coolant mass flow rate in one coolant channel [kg/s]
        cpc (float): Coolant specific heat capacity [J/kg-K]
        Tin (float): Coolant inlet temperature [K]

    Returns:
        T (float): Coolant outlet temperature [K]
    """
    # Replace the below line with your line(s) of code to compute the outlet temperature.
    T = ((q*z*4)/4)/(m*cpc) + Tin
    return T

# Example usage:
q = 10000 * 40  # [W/m]
z = np.linspace(0, 400, 40)  # [cm]
m = 0.394  # [kg/s] per channel
cpc = 4310  # [J/kg-K]
Tin = 553  # [K]
T_result = compute_core_temperatures(q, z, m, cpc, Tin)
print("Coolant Outlet Temperature:", T_result)




import numpy as np
import matplotlib.pyplot as plt

def main():
    # Calculate linear power
    q, z = linear_power()

    # Create an array of mass flow rates from 0.25 to 0.5 in steps of 0.01
    mass_flow_rates = np.arange(0.25, 0.51, 0.01)

    # Create an array to store outlet temperatures
    outlet_temperatures = []

    for m in mass_flow_rates:
        # Compute outlet temperature for each mass flow rate
        T = compute_core_temperatures(q, z, m, cpc, Tin)
        outlet_temperatures.append(T)

    # Plot the results
    plt.plot(mass_flow_rates, outlet_temperatures, marker='o')
    plt.xlabel('Mass Flow Rate (kg/s)')
    plt.ylabel('Outlet Temperature (K)')
    plt.title('Outlet Temperature vs Mass Flow Rate')
    plt.grid(True)
    plt.show()

if __name__ == "__main__":
    cpc = coolant_heat_capacity()
    Tin = 553  # [K]
    main()
